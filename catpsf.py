#!/usr/bin/env python
#-*- coding: utf-8 -*-

#this script is to concatenate multiple psf files generated by top2psf.pl script
#for every monomer and solvent and get a single psf file for the complex.

#syntax: ./catpsf.py -p psffile_1 psffile_2 .. [-w] num_of_water [-o] complex.psf
#caution: psf file should be listed in increasing order if you want a correct psf
#file with bond information

from sys import argv, exit
import argparse

script = argv [0]

#parser setup
#for help infomation, use ./getpsf.py -h (--help)
parser = argparse.ArgumentParser()
parser.add_argument('-p', '--psf', dest = 'protein', nargs = '+', help = 'list of protein related psf file in order', type = str)
parser.add_argument('-w', '--water', dest = 'water', help = 'if water option is turned on, make sure water psf file is located in the current dir and it means the number of water molecules', type = int)
parser.add_argument('-o', '--output', dest = 'output', help = 'output name, complex.psf for default', type = str)

#parse the arguments and put them in the defined directory 
#print vars(parser.parse_args())
#exit()
options = vars(parser.parse_args())

#get the output name
if options['output'] == None:
    outfile = 'complex.psf'
else:
    outfile = options['output']

#init output and write header
output = open(outfile, 'w')

output.write('PSF\n')
output.write('       4 !NTITLE\n')
output.write(' REMARKS PSF TOPOLOGY CREATED BY PYTHON SCRIPT (XUYAN RU)\n')
output.write(' REMARKS FURTHER CONTACT XUYAN.RU@DUKE.EDU\n')
output.write('\n')

#init the list for storing ATOM, BOND, ATOM #, and TMP BOND info
ATOMS = []
BONDS = []
NUM = [0]
TMP_BOND = []

#start parsing all single protein psf files
for psf in options['protein']:
    #open and read all lines
    opener = open(psf,'r')
    lines = opener.readlines()
    opener.close()

    #real parsing the file
    #since file generated by PERL SCRIPT begin at line 6, we begin searching from line 6
    for i in range(5,len(lines)):
        line = lines[i]
        #store atom information
        if 'MAIN' in line:
            keys = line.split()
            keys[0] = str(int(keys[0])+NUM[-1])
            #get new line and store it in the ATOM list
            newline = '{:>8s}{:>5s} {:<5s}{:<5s}{:<5s}{:<5s}{:>14s} {:>14s}\n'.format(*keys)
            ATOMS.append(newline)
        #if bond section meet, terminat this for loop and begin the new one
        if '!NBOND' in line:
            num = i
            break
    for j in range(num+1,len(lines)):
        line = lines[j]
        keys = line.split()
        for key in keys:
            TMP_BOND.append(str(int(key)+NUM[-1])) 
            #test the length of the TMP_BOND and store them to BONDS as line
            if len(TMP_BOND) == 8:
                newline = '{:>8s}{:>8s}{:>8s}{:>8s}{:>8s}{:>8s}{:>8s}{:>8s}\n'.format(*TMP_BOND)
                BONDS.append(newline)
                #clear the tmp list
                TMP_BOND[:] = []


    #after the atom and bond information parsing process, get the num of atom and append it to the num list
    NUM.append(len(ATOMS))
    continue

#water molecules parsing part
if options['water'] != None:
#start adding water molecule topologies in the list
    for i in range(options['water']):
        #open the water psf file
        #make sure that the water psf file name is correct, we didn't require this name in executing the script
        opener = open('water.psf','r')
        lines = opener.readlines()
        opener.close()
    
        #real parsing the file
        #since file generated by PERL SCRIPT begin at line 6, we begin searching from line 6
        #atom info
        for i in range(5,len(lines)):
            line = lines[i]
            #store atom information
            if 'MAIN' in line:
                keys = line.split()
                keys[0] = str(int(keys[0])+NUM[-1])
                #get new line and store it in the ATOM list
                newline = '{:>8s}{:>5s} {:<5s}{:<5s}{:<5s}{:<5s}{:>14s} {:>14s}\n'.format(*keys)
                ATOMS.append(newline)
            #if bond section meet, terminates this for loop and begin the new one
            if '!NBOND' in line:
                num = i
                break
        #bond info
        for j in range(num+1,len(lines)):
            line = lines[j]
            keys = line.split()
            for key in keys:
                TMP_BOND.append(str(int(key)+NUM[-1])) 
                #test the length of the TMP_BOND and store them to BONDS as line
                if len(TMP_BOND) == 8:
                    newline = '{:>8s}{:>8s}{:>8s}{:>8s}{:>8s}{:>8s}{:>8s}{:>8s}\n'.format(*TMP_BOND)
                    BONDS.append(newline)
                    #clear the tmp list
                    TMP_BOND[:] = []

        #after the atom and bond information parsing process, get the num of atom and append it to the num list
        NUM.append(len(ATOMS))
        continue


#now writing the output file, main content
num_of_atom = NUM[-1]
output.write('{:>8s} !NATOM\n'.format(str(num_of_atom)))
#writing atom info
for line in ATOMS:
    output.write(line)

#blank line 
output.write('\n')

#calculate the number of bond pairs
num_of_bond = len(BONDS)*4 + len(TMP_BOND)/2
output.write('{:>8s} !NBOND: bonds\n'.format(str(num_of_bond)))
#writing bond info
for line in BONDS:
    output.write(line)

#write the last line
lastline = ''
for string in TMP_BOND:
    lastline = lastline + '{:>8s}'.format(string)

lastline = lastline + '\n'

output.write(lastline)

#finish writing the output file, close the file
output.close()


